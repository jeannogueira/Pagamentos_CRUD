{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet PagamentoComponent = class PagamentoComponent {\n  constructor(pagamentoDataService) {\n    this.pagamentoDataService = pagamentoDataService;\n    this.pagamentos = [];\n    this.pagamento = {};\n    this.tipo_template = 1;\n  }\n  ngOnInit() {}\n  changeTipoTemplate(tipo) {\n    debugger;\n    if (tipo === 'Boleto') {\n      this.tipo_template = 1;\n    } else {\n      this.tipo_template = 2;\n    }\n  }\n  listar() {\n    debugger;\n    this.pagamentoDataService.get().subscribe(data => {\n      this.pagamentos = data;\n    }, error => {\n      console.log(error);\n      alert('erro interno do sistema');\n    });\n  }\n  save() {\n    this.pagamentoDataService.post(this.pagamento).subscribe(data => {\n      if (data) {\n        alert('Pagamento cadastrado com sucesso');\n        this.pagamento = {};\n      } else {\n        alert('Erro ao cadastrar Pagamento');\n      }\n    }, error => {\n      console.log(error);\n      alert('erro interno do sistema');\n    });\n  }\n  edit(pagamento) {\n    debugger;\n    this.pagamentoDataService.put(pagamento).subscribe(codigo => {\n      if (codigo) {\n        alert('Pagamento atualizado com sucesso');\n        this.listar();\n        this.pagamento = {};\n      } else {\n        alert('Erro ao atualizar Pagamento');\n      }\n    }, error => {\n      console.log(error);\n      alert('erro interno do sistema');\n    });\n  }\n  delete(codigo) {\n    debugger;\n    this.pagamentoDataService.delete(codigo).subscribe(codigo => {\n      if (codigo) {\n        alert('Pagamento excluído com sucesso');\n        this.listar();\n      } else {\n        alert('Erro ao excluir Pagamento');\n      }\n    }, error => {\n      console.log(error);\n      alert('erro interno do sistema');\n    });\n  }\n};\nPagamentoComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './pagamento.component.html',\n  styleUrls: ['./pagamento.component.css']\n})], PagamentoComponent);\nexport { PagamentoComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAwB,eAAe;AAWlD,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAQ7BC,YAAoBC,oBAA0C;IAA1C,yBAAoB,GAApBA,oBAAoB;IANxC,eAAU,GAAQ,EAAE;IACpB,cAAS,GAAQ,EAAE;IAEnB,kBAAa,GAAG,CAAC;EAGiD;EAElEC,QAAQ,IAER;EAEAC,kBAAkB,CAACC,IAAY;IAC7B;IACA,IAAIA,IAAI,KAAK,QAAQ,EAAE;MACrB,IAAI,CAACC,aAAa,GAAG,CAAC;KACvB,MACI;MACH,IAAI,CAACA,aAAa,GAAG,CAAC;;EAG1B;EAEAC,MAAM;IACJ;IACA,IAAI,CAACL,oBAAoB,CAACM,GAAG,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MAC/C,IAAI,CAACC,UAAU,GAAGD,IAAI;IACxB,CAAC,EAAEE,KAAK,IAAG;MACTC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClBG,KAAK,CAAC,yBAAyB,CAAC;IAClC,CAAC,CAAC;EACJ;EAEAC,IAAI;IACF,IAAI,CAACd,oBAAoB,CAACe,IAAI,CAAC,IAAI,CAACC,SAAS,CAAC,CAACT,SAAS,CAACC,IAAI,IAAG;MAC9D,IAAIA,IAAI,EAAE;QACRK,KAAK,CAAC,kCAAkC,CAAC;QACzC,IAAI,CAACG,SAAS,GAAG,EAAE;OACpB,MAAM;QACLH,KAAK,CAAC,6BAA6B,CAAC;;IAExC,CAAC,EAAEH,KAAK,IAAG;MACTC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClBG,KAAK,CAAC,yBAAyB,CAAC;IAClC,CAAC,CAAC;EACJ;EAEAI,IAAI,CAACD,SAAc;IACjB;IACA,IAAI,CAAChB,oBAAoB,CAACkB,GAAG,CAACF,SAAS,CAAC,CAACT,SAAS,CAACY,MAAM,IAAG;MAC1D,IAAIA,MAAM,EAAE;QACVN,KAAK,CAAC,kCAAkC,CAAC;QACzC,IAAI,CAACR,MAAM,EAAE;QACb,IAAI,CAACW,SAAS,GAAG,EAAE;OACpB,MAAM;QACLH,KAAK,CAAC,6BAA6B,CAAC;;IAExC,CAAC,EAAEH,KAAK,IAAG;MACTC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClBG,KAAK,CAAC,yBAAyB,CAAC;IAClC,CAAC,CAAC;EACJ;EAEAO,MAAM,CAACD,MAAW;IAChB;IACA,IAAI,CAACnB,oBAAoB,CAACoB,MAAM,CAACD,MAAM,CAAC,CAACZ,SAAS,CAACY,MAAM,IAAG;MAC1D,IAAIA,MAAM,EAAE;QACVN,KAAK,CAAC,gCAAgC,CAAC;QACvC,IAAI,CAACR,MAAM,EAAE;OACd,MAAM;QACLQ,KAAK,CAAC,2BAA2B,CAAC;;IAEtC,CAAC,EAAEH,KAAK,IAAG;MACTC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClBG,KAAK,CAAC,yBAAyB,CAAC;IAClC,CAAC,CAAC;EACJ;CAED;AAhFYf,kBAAkB,eAP9BD,SAAS,CAAC;EACTwB,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GAGWzB,kBAAkB,CAgF9B;SAhFYA,kBAAkB","names":["Component","PagamentoComponent","constructor","pagamentoDataService","ngOnInit","changeTipoTemplate","tipo","tipo_template","listar","get","subscribe","data","pagamentos","error","console","log","alert","save","post","pagamento","edit","put","codigo","delete","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Larissa\\source\\repos\\MeiosPagamento\\MeiosPagamento\\ClientApp\\src\\app\\pagamento\\pagamento.component.ts"],"sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { PagamentoDataService } from '../_data-services/pagamento.data-service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './pagamento.component.html',\r\n  styleUrls: ['./pagamento.component.css']\r\n})\r\n\r\n\r\nexport class PagamentoComponent implements OnInit {\r\n\r\n  pagamentos: any = [];\r\n  pagamento: any = {};\r\n  codigo: any;\r\n  tipo_template = 1;\r\n\r\n\r\n  constructor(private pagamentoDataService: PagamentoDataService) { }\r\n\r\n  ngOnInit() {\r\n\r\n  }\r\n\r\n  changeTipoTemplate(tipo: string) {\r\n    debugger;\r\n    if (tipo === 'Boleto') {\r\n      this.tipo_template = 1;\r\n    }\r\n    else {\r\n      this.tipo_template = 2;\r\n    }\r\n    \r\n  }\r\n\r\n  listar() {\r\n    debugger;\r\n    this.pagamentoDataService.get().subscribe(data => {\r\n      this.pagamentos = data;\r\n    }, error => {\r\n      console.log(error);\r\n      alert('erro interno do sistema');\r\n    })\r\n  }\r\n\r\n  save() {\r\n    this.pagamentoDataService.post(this.pagamento).subscribe(data => {\r\n      if (data) {\r\n        alert('Pagamento cadastrado com sucesso');\r\n        this.pagamento = {};\r\n      } else {\r\n        alert('Erro ao cadastrar Pagamento');\r\n      }\r\n    }, error => {\r\n      console.log(error);\r\n      alert('erro interno do sistema');\r\n    })\r\n  }\r\n\r\n  edit(pagamento: any) {\r\n    debugger;\r\n    this.pagamentoDataService.put(pagamento).subscribe(codigo => {\r\n      if (codigo) {\r\n        alert('Pagamento atualizado com sucesso');\r\n        this.listar();\r\n        this.pagamento = {};\r\n      } else {\r\n        alert('Erro ao atualizar Pagamento');\r\n      }\r\n    }, error => {\r\n      console.log(error);\r\n      alert('erro interno do sistema');\r\n    })\r\n  }\r\n\r\n  delete(codigo: any) {\r\n    debugger;\r\n    this.pagamentoDataService.delete(codigo).subscribe(codigo => {\r\n      if (codigo) {\r\n        alert('Pagamento excluído com sucesso');\r\n        this.listar();\r\n      } else {\r\n        alert('Erro ao excluir Pagamento');\r\n      }\r\n    }, error => {\r\n      console.log(error);\r\n      alert('erro interno do sistema');\r\n    })\r\n  }\r\n\r\n}\r\n\r\n\r\ninterface WeatherForecast {\r\n  date: string;\r\n  temperatureC: number;\r\n  temperatureF: number;\r\n  summary: string;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}